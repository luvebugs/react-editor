(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("Immutable"), require("React"), require("Draft"), require("ReactDOM"));
	else if(typeof define === 'function' && define.amd)
		define(["Immutable", "React", "Draft", "ReactDOM"], factory);
	else if(typeof exports === 'object')
		exports["DraftExtend"] = factory(require("Immutable"), require("React"), require("Draft"), require("ReactDOM"));
	else
		root["DraftExtend"] = factory(root["Immutable"], root["React"], root["Draft"], root["ReactDOM"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_15__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.compose = exports.pluginUtils = exports.createPlugin = exports.KeyCommandController = exports.Toolbar = exports.Editor = undefined;

	var _Editor = __webpack_require__(7);

	var _Editor2 = _interopRequireDefault(_Editor);

	var _Toolbar = __webpack_require__(9);

	var _Toolbar2 = _interopRequireDefault(_Toolbar);

	var _KeyCommandController = __webpack_require__(3);

	var _KeyCommandController2 = _interopRequireDefault(_KeyCommandController);

	var _createPlugin = __webpack_require__(10);

	var _createPlugin2 = _interopRequireDefault(_createPlugin);

	var _utils = __webpack_require__(11);

	var _utils2 = _interopRequireDefault(_utils);

	var _compose = __webpack_require__(5);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Editor = _Editor2.default;
	exports.Toolbar = _Toolbar2.default;
	exports.KeyCommandController = _KeyCommandController2.default;
	exports.createPlugin = _createPlugin2.default;
	exports.pluginUtils = _utils2.default;
	exports.compose = _compose2.default;

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _immutable = __webpack_require__(1);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _draftJs = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var providedProps = {
	  addKeyCommandListener: _react.PropTypes.func,
	  removeKeyCommandListener: _react.PropTypes.func,
	  handleKeyCommand: _react.PropTypes.func
	};

	var KeyCommandController = function KeyCommandController(Component) {
	  return _react2.default.createClass({
	    displayName: 'KeyCommandController(' + Component.displayName + ')',

	    propTypes: _extends({
	      editorState: _react.PropTypes.object,
	      onChange: _react.PropTypes.func,
	      keyCommandListeners: _react.PropTypes.arrayOf(_react.PropTypes.func)
	    }, providedProps),

	    getDefaultProps: function getDefaultProps() {
	      return {
	        keyCommandListeners: []
	      };
	    },
	    componentWillMount: function componentWillMount() {
	      this.keyCommandOverrides = (0, _immutable.List)(this.props.keyCommandListeners);
	      this.keyCommandListeners = (0, _immutable.List)();
	    },
	    componentDidMount: function componentDidMount() {
	      var _this = this;

	      // ensure valid props for deferral
	      var propNames = Object.keys(providedProps);
	      var presentProps = propNames.filter(function (propName) {
	        return _this.props[propName] !== undefined;
	      });
	      var nonePresent = presentProps.length === 0;
	      var allPresent = presentProps.length === propNames.length;

	      (0, _invariant2.default)(nonePresent || allPresent, 'KeyCommandController: A KeyCommandController is receiving only some props (' + presentProps.join(', ') + ') necessary to defer to a parent key command controller.');

	      if (allPresent) {
	        this.props.keyCommandListeners.forEach(function (listener) {
	          _this.props.addKeyCommandListener(listener);
	        });
	      }
	    },
	    componentWillUnmount: function componentWillUnmount() {
	      var _this2 = this;

	      if (this.props.removeKeyCommandListener) {
	        this.props.keyCommandListeners.forEach(function (listener) {
	          _this2.props.removeKeyCommandListener(listener);
	        });
	      }
	    },
	    addKeyCommandListener: function addKeyCommandListener(listener) {
	      var addKeyCommandListener = this.props.addKeyCommandListener;


	      if (addKeyCommandListener) {
	        addKeyCommandListener(listener);
	        return;
	      }

	      this.keyCommandListeners = this.keyCommandListeners.unshift(listener);
	    },
	    removeKeyCommandListener: function removeKeyCommandListener(listener) {
	      var removeKeyCommandListener = this.props.removeKeyCommandListener;


	      if (removeKeyCommandListener) {
	        removeKeyCommandListener(listener);
	        return;
	      }

	      this.keyCommandListeners = this.keyCommandListeners.filterNot(function (l) {
	        return l === listener;
	      });
	    },
	    handleKeyCommand: function handleKeyCommand(command) {
	      var keyboardEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      var _props = this.props,
	          editorState = _props.editorState,
	          onChange = _props.onChange,
	          handleKeyCommand = _props.handleKeyCommand;


	      if (handleKeyCommand) {
	        return handleKeyCommand(command, keyboardEvent);
	      }

	      var result = this.keyCommandOverrides.concat(this.keyCommandListeners).reduce(function (_ref, listener) {
	        var state = _ref.state,
	            hasChanged = _ref.hasChanged;

	        if (hasChanged === true) {
	          return {
	            state: state,
	            hasChanged: hasChanged
	          };
	        }

	        var listenerResult = listener(state, command, keyboardEvent);
	        var isEditorState = listenerResult instanceof _draftJs.EditorState;

	        if (listenerResult === true || isEditorState && listenerResult !== state) {
	          if (isEditorState) {
	            onChange(listenerResult);
	            return {
	              state: listenerResult,
	              hasChanged: true
	            };
	          }
	          return {
	            state: state,
	            hasChanged: true
	          };
	        }

	        return {
	          state: state,
	          hasChanged: hasChanged
	        };
	      }, { state: editorState, hasChanged: false });

	      return result.hasChanged;
	    },
	    focus: function focus() {
	      this.refs.editor.focus();
	    },
	    blur: function blur() {
	      this.refs.editor.blur();
	    },
	    render: function render() {
	      var _props2 = this.props,
	          editorState = _props2.editorState,
	          onChange = _props2.onChange,
	          keyCommandListeners = _props2.keyCommandListeners,
	          others = _objectWithoutProperties(_props2, ['editorState', 'onChange', 'keyCommandListeners']);

	      return _react2.default.createElement(Component, _extends({}, others, {
	        ref: 'editor',
	        editorState: editorState,
	        onChange: onChange,
	        addKeyCommandListener: this.addKeyCommandListener,
	        removeKeyCommandListener: this.removeKeyCommandListener,
	        handleKeyCommand: this.handleKeyCommand
	      }));
	    }
	  });
	};

	exports.default = KeyCommandController;

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function () {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return function () {
	    if (funcs.length === 0) {
	      return arguments.length <= 0 ? undefined : arguments[0];
	    }

	    var last = funcs[funcs.length - 1];
	    var rest = funcs.slice(0, -1);

	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _immutable = __webpack_require__(1);

	var _draftJs = __webpack_require__(4);

	var _KeyCommandController = __webpack_require__(3);

	var _KeyCommandController2 = _interopRequireDefault(_KeyCommandController);

	var _OverlayWrapper = __webpack_require__(8);

	var _OverlayWrapper2 = _interopRequireDefault(_OverlayWrapper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var propTypes = {
	  className: _react.PropTypes.string,
	  editorState: _react.PropTypes.object,
	  onChange: _react.PropTypes.func,
	  decorators: _react.PropTypes.array,
	  styleMap: _react.PropTypes.object,
	  buttons: _react.PropTypes.array,
	  overlays: _react.PropTypes.array,
	  blockRendererFn: _react.PropTypes.func,
	  blockStyleFn: _react.PropTypes.func,
	  keyBindingFn: _react.PropTypes.func,
	  addKeyCommandListener: _react.PropTypes.func.isRequired,
	  removeKeyCommandListener: _react.PropTypes.func.isRequired,
	  handleReturn: _react.PropTypes.func,
	  onEscape: _react.PropTypes.func,
	  onTab: _react.PropTypes.func,
	  onUpArrow: _react.PropTypes.func,
	  onDownArrow: _react.PropTypes.func,
	  readOnly: _react.PropTypes.bool,
	  showButtons: _react.PropTypes.bool
	};

	var EditorWrapper = _react2.default.createClass({
	  displayName: 'EditorWrapper',

	  propTypes: propTypes,

	  childContextTypes: {
	    getEditorState: _react.PropTypes.func,
	    getReadOnly: _react.PropTypes.func,
	    setReadOnly: _react.PropTypes.func,
	    onChange: _react.PropTypes.func,
	    focus: _react.PropTypes.func,
	    blur: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      className: '',
	      editorState: _draftJs.EditorState.createEmpty(),
	      onChange: function onChange() {},
	      decorators: [],
	      styleMap: {},
	      buttons: [],
	      overlays: [],
	      blockRendererFn: function blockRendererFn() {},
	      blockStyleFn: function blockStyleFn() {},
	      keyBindingFn: function keyBindingFn() {},
	      readOnly: false,
	      showButtons: true
	    };
	  },
	  getInitialState: function getInitialState() {
	    var decorator = new _draftJs.CompositeDecorator(this.props.decorators);
	    return {
	      decorator: decorator,
	      readOnly: false
	    };
	  },
	  getChildContext: function getChildContext() {
	    return {
	      getEditorState: this.getDecoratedState,
	      getReadOnly: this.getReadOnly,
	      setReadOnly: this.setReadOnly,
	      onChange: this.props.onChange,
	      focus: this.focus,
	      blur: this.blur
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.decorators.length === this.state.decorator._decorators.length) {
	      var allDecoratorsMatch = this.state.decorator._decorators.every(function (decorator, i) {
	        return decorator === nextProps.decorators[i];
	      });
	      if (allDecoratorsMatch) {
	        return;
	      }
	    }

	    this.setState({ decorator: new _draftJs.CompositeDecorator(nextProps.decorators) });
	  },
	  keyBindingFn: function keyBindingFn(e) {
	    var pluginsCommand = this.props.keyBindingFn(e);
	    if (pluginsCommand) {
	      return pluginsCommand;
	    }

	    return (0, _draftJs.getDefaultKeyBinding)(e);
	  },
	  handleReturn: function handleReturn(e) {
	    return this.props.handleReturn && this.props.handleReturn(e) || this.props.handleKeyCommand('return', e);
	  },
	  onEscape: function onEscape(e) {
	    return this.props.onEscape && this.props.onEscape(e) || this.props.handleKeyCommand('escape', e);
	  },
	  onTab: function onTab(e) {
	    return this.props.onTab && this.props.onTab(e) || this.props.handleKeyCommand('tab', e);
	  },
	  onUpArrow: function onUpArrow(e) {
	    return this.props.onUpArrow && this.props.onUpArrow(e) || this.props.handleKeyCommand('up-arrow', e);
	  },
	  onDownArrow: function onDownArrow(e) {
	    return this.props.onDownArrow && this.props.onDownArrow(e) || this.props.handleKeyCommand('down-arrow', e);
	  },
	  focus: function focus() {
	    this.refs.editor.focus();
	  },
	  blur: function blur() {
	    this.refs.editor.blur();
	  },
	  getOtherProps: function getOtherProps() {
	    var _this = this;

	    var propKeys = Object.keys(this.props);
	    var propTypeKeys = Object.keys(propTypes);

	    var propsToPass = propKeys.filter(function (prop) {
	      return propTypeKeys.indexOf(prop) === -1;
	    });

	    return propsToPass.reduce(function (acc, prop) {
	      acc[prop] = _this.props[prop];
	      return acc;
	    }, {});
	  },
	  getReadOnly: function getReadOnly() {
	    return this.state.readOnly || this.props.readOnly;
	  },
	  setReadOnly: function setReadOnly(readOnly) {
	    this.setState({ readOnly: readOnly });
	  },
	  getDecoratedState: function getDecoratedState() {
	    var editorState = this.props.editorState;
	    var decorator = this.state.decorator;


	    var currentDecorator = editorState.getDecorator();

	    if (currentDecorator && currentDecorator._decorators === decorator._decorators) {
	      return editorState;
	    }

	    return _draftJs.EditorState.set(editorState, { decorator: decorator });
	  },
	  renderPluginButtons: function renderPluginButtons() {
	    var _this2 = this;

	    var _props = this.props,
	        onChange = _props.onChange,
	        addKeyCommandListener = _props.addKeyCommandListener,
	        removeKeyCommandListener = _props.removeKeyCommandListener,
	        showButtons = _props.showButtons;


	    if (showButtons === false) {
	      return null;
	    }

	    var decoratedState = this.getDecoratedState();

	    return this.props.buttons.map(function (Button, index) {
	      return _react2.default.createElement(Button, _extends({}, _this2.getOtherProps(), {
	        key: 'button-' + index,
	        attachedToEditor: true,
	        editorState: decoratedState,
	        onChange: onChange,
	        addKeyCommandListener: addKeyCommandListener,
	        removeKeyCommandListener: removeKeyCommandListener
	      }));
	    });
	  },
	  renderOverlays: function renderOverlays() {
	    var _this3 = this;

	    var _props2 = this.props,
	        onChange = _props2.onChange,
	        addKeyCommandListener = _props2.addKeyCommandListener,
	        removeKeyCommandListener = _props2.removeKeyCommandListener;


	    var decoratedState = this.getDecoratedState();

	    return this.props.overlays.map(function (Overlay, index) {
	      return _react2.default.createElement(
	        _OverlayWrapper2.default,
	        { key: index },
	        _react2.default.createElement(Overlay, _extends({}, _this3.getOtherProps(), {
	          editorState: decoratedState,
	          onChange: onChange,
	          addKeyCommandListener: addKeyCommandListener,
	          removeKeyCommandListener: removeKeyCommandListener
	        }))
	      );
	    });
	  },
	  render: function render() {
	    var _props3 = this.props,
	        styleMap = _props3.styleMap,
	        blockRendererFn = _props3.blockRendererFn,
	        blockStyleFn = _props3.blockStyleFn,
	        onChange = _props3.onChange,
	        handleKeyCommand = _props3.handleKeyCommand,
	        otherProps = _objectWithoutProperties(_props3, ['styleMap', 'blockRendererFn', 'blockStyleFn', 'onChange', 'handleKeyCommand']);

	    var decoratedState = this.getDecoratedState();
	    var className = 'draft-extend ' + this.props.className;

	    var readOnly = this.getReadOnly();

	    return _react2.default.createElement(
	      'div',
	      { className: className },
	      _react2.default.createElement(
	        'div',
	        { className: 'draft-extend-editor' },
	        _react2.default.createElement(_draftJs.Editor, _extends({}, otherProps, {
	          ref: 'editor',
	          editorState: decoratedState,
	          readOnly: readOnly,
	          onChange: onChange,
	          blockStyleFn: blockStyleFn,
	          blockRendererFn: blockRendererFn,
	          customStyleMap: styleMap,
	          handleKeyCommand: handleKeyCommand,
	          keyBindingFn: this.keyBindingFn,
	          handleReturn: this.handleReturn,
	          onEscape: this.onEscape,
	          onTab: this.onTab,
	          onUpArrow: this.onUpArrow,
	          onDownArrow: this.onDownArrow
	        })),
	        _react2.default.createElement(
	          'div',
	          { className: 'draft-extend-controls' },
	          this.renderPluginButtons()
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'draft-extend-overlays' },
	          this.renderOverlays()
	        )
	      )
	    );
	  }
	});

	exports.default = (0, _KeyCommandController2.default)(EditorWrapper);

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(15);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _react2.default.createClass({
	  displayName: 'OverlayWrapper',
	  getInitialState: function getInitialState() {
	    var node = document.createElement('div');
	    document.body.appendChild(node);

	    return { node: node };
	  },
	  componentDidMount: function componentDidMount() {
	    this.renderOverlay();
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    this.renderOverlay();
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    _reactDom2.default.unmountComponentAtNode(this.state.node);
	  },
	  renderOverlay: function renderOverlay() {
	    var child = _react2.default.Children.only(this.props.children);
	    _reactDom2.default.render(child, this.state.node);
	  },
	  render: function render() {
	    return null;
	  }
	});

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _KeyCommandController = __webpack_require__(3);

	var _KeyCommandController2 = _interopRequireDefault(_KeyCommandController);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var Toolbar = _react2.default.createClass({
	  displayName: 'Toolbar',

	  propTypes: {
	    editorState: _react.PropTypes.object,
	    onChange: _react.PropTypes.func,
	    buttons: _react.PropTypes.array,
	    addKeyCommandListener: _react.PropTypes.func.isRequired,
	    removeKeyCommandListener: _react.PropTypes.func.isRequired
	  },

	  childContextTypes: {
	    getEditorState: _react.PropTypes.func,
	    onChange: _react.PropTypes.func
	  },

	  getChildContext: function getChildContext() {
	    return {
	      getEditorState: this.getEditorState,
	      onChange: this.props.onChange
	    };
	  },
	  getEditorState: function getEditorState() {
	    return this.props.editorState;
	  },
	  renderButtons: function renderButtons() {
	    var _props = this.props,
	        editorState = _props.editorState,
	        onChange = _props.onChange,
	        buttons = _props.buttons,
	        addKeyCommandListener = _props.addKeyCommandListener,
	        removeKeyCommandListener = _props.removeKeyCommandListener,
	        otherProps = _objectWithoutProperties(_props, ['editorState', 'onChange', 'buttons', 'addKeyCommandListener', 'removeKeyCommandListener']);

	    return buttons.map(function (Button, index) {
	      return _react2.default.createElement(Button, _extends({}, otherProps, {
	        key: 'button-' + index,
	        editorState: editorState,
	        onChange: onChange,
	        addKeyCommandListener: addKeyCommandListener,
	        removeKeyCommandListener: removeKeyCommandListener
	      }));
	    });
	  },
	  render: function render() {
	    return _react2.default.createElement(
	      'ul',
	      { className: 'draft-extend-controls' },
	      this.renderButtons()
	    );
	  }
	});

	exports.default = (0, _KeyCommandController2.default)(Toolbar);

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _immutable = __webpack_require__(1);

	var _memoize = __webpack_require__(13);

	var _memoize2 = _interopRequireDefault(_memoize);

	var _compose = __webpack_require__(5);

	var _compose2 = _interopRequireDefault(_compose);

	var _accumulateFunction = __webpack_require__(12);

	var _accumulateFunction2 = _interopRequireDefault(_accumulateFunction);

	var _middlewareAdapter = __webpack_require__(14);

	var _middlewareAdapter2 = _interopRequireDefault(_middlewareAdapter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var emptyFunction = function emptyFunction() {};
	var emptyArray = [];
	var emptyObject = {};

	var defaultMiddlewareFunction = function defaultMiddlewareFunction(next) {
	  return function () {
	    return next.apply(undefined, arguments);
	  };
	};
	defaultMiddlewareFunction.__isMiddleware = true;

	var memoizedCompose = (0, _memoize2.default)(_compose2.default);
	var memoizedAccumulateFunction = (0, _memoize2.default)(_accumulateFunction2.default);
	var memoizedAssign = (0, _memoize2.default)(function () {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return Object.assign.apply(Object, [{}].concat(args));
	});
	var memoizedConcat = (0, _memoize2.default)(function (a1, a2) {
	  return a1.concat(a2);
	});
	var memoizedCoerceArray = (0, _memoize2.default)(function (arg) {
	  return Array.isArray(arg) ? arg : [arg];
	});
	var memoizedPassEmptyStyles = (0, _memoize2.default)(function (func) {
	  return function (nodeName, node) {
	    return func(nodeName, node, (0, _immutable.OrderedSet)());
	  };
	});
	var memoizedMiddlewareAdapter = (0, _memoize2.default)(_middlewareAdapter2.default);

	var createPlugin = function createPlugin(_ref) {
	  var _ref$displayName = _ref.displayName,
	      displayName = _ref$displayName === undefined ? 'Plugin' : _ref$displayName,
	      _ref$decorators = _ref.decorators,
	      decorators = _ref$decorators === undefined ? emptyArray : _ref$decorators,
	      _ref$buttons = _ref.buttons,
	      buttons = _ref$buttons === undefined ? emptyArray : _ref$buttons,
	      _ref$overlays = _ref.overlays,
	      overlays = _ref$overlays === undefined ? emptyArray : _ref$overlays,
	      _ref$styleMap = _ref.styleMap,
	      styleMap = _ref$styleMap === undefined ? emptyObject : _ref$styleMap,
	      _ref$blockRendererFn = _ref.blockRendererFn,
	      blockRendererFn = _ref$blockRendererFn === undefined ? emptyFunction : _ref$blockRendererFn,
	      _ref$blockStyleFn = _ref.blockStyleFn,
	      blockStyleFn = _ref$blockStyleFn === undefined ? emptyFunction : _ref$blockStyleFn,
	      _ref$keyBindingFn = _ref.keyBindingFn,
	      keyBindingFn = _ref$keyBindingFn === undefined ? emptyFunction : _ref$keyBindingFn,
	      _ref$keyCommandListen = _ref.keyCommandListener,
	      keyCommandListener = _ref$keyCommandListen === undefined ? emptyFunction : _ref$keyCommandListen,
	      _ref$htmlToStyle = _ref.htmlToStyle,
	      htmlToStyle = _ref$htmlToStyle === undefined ? defaultMiddlewareFunction : _ref$htmlToStyle,
	      _ref$htmlToBlock = _ref.htmlToBlock,
	      htmlToBlock = _ref$htmlToBlock === undefined ? defaultMiddlewareFunction : _ref$htmlToBlock,
	      _ref$htmlToEntity = _ref.htmlToEntity,
	      htmlToEntity = _ref$htmlToEntity === undefined ? defaultMiddlewareFunction : _ref$htmlToEntity,
	      _ref$textToEntity = _ref.textToEntity,
	      textToEntity = _ref$textToEntity === undefined ? defaultMiddlewareFunction : _ref$textToEntity,
	      _ref$styleToHTML = _ref.styleToHTML,
	      styleToHTML = _ref$styleToHTML === undefined ? defaultMiddlewareFunction : _ref$styleToHTML,
	      _ref$blockToHTML = _ref.blockToHTML,
	      blockToHTML = _ref$blockToHTML === undefined ? defaultMiddlewareFunction : _ref$blockToHTML,
	      _ref$entityToHTML = _ref.entityToHTML,
	      entityToHTML = _ref$entityToHTML === undefined ? defaultMiddlewareFunction : _ref$entityToHTML;
	  return function (ToWrap) {
	    decorators = memoizedCoerceArray(decorators);
	    buttons = memoizedCoerceArray(buttons);
	    overlays = memoizedCoerceArray(overlays);

	    if (ToWrap.prototype && ToWrap.prototype.isReactComponent) {
	      // wrapping an Editor component
	      return _react2.default.createClass({
	        displayName: displayName,

	        propTypes: {
	          styleMap: _react.PropTypes.object,
	          decorators: _react.PropTypes.array,
	          buttons: _react.PropTypes.array,
	          overlays: _react.PropTypes.array,
	          blockRendererFn: _react.PropTypes.func,
	          blockStyleFn: _react.PropTypes.func,
	          keyBindingFn: _react.PropTypes.func,
	          keyCommandListeners: _react.PropTypes.arrayOf(_react.PropTypes.func)
	        },

	        getDefaultProps: function getDefaultProps() {
	          return {
	            styleMap: emptyObject,
	            decorators: emptyArray,
	            buttons: emptyArray,
	            overlays: emptyArray,
	            blockRendererFn: emptyFunction,
	            blockStyleFn: emptyFunction,
	            keyBindingFn: emptyFunction,
	            keyCommandListeners: emptyArray
	          };
	        },
	        focus: function focus() {
	          if (this.refs.child.focus) {
	            this.refs.child.focus();
	          }
	        },
	        blur: function blur() {
	          if (this.refs.child.blur) {
	            this.refs.child.blur();
	          }
	        },
	        render: function render() {
	          var newStyleMap = memoizedAssign(this.props.styleMap, styleMap);
	          var newDecorators = memoizedConcat(this.props.decorators, decorators);
	          var newButtons = memoizedConcat(this.props.buttons, buttons);
	          var newOverlays = memoizedConcat(this.props.overlays, overlays);
	          var newBlockRendererFn = memoizedAccumulateFunction(blockRendererFn, this.props.blockRendererFn);
	          var newBlockStyleFn = memoizedAccumulateFunction(blockStyleFn, this.props.blockStyleFn);
	          var newKeyBindingFn = memoizedAccumulateFunction(keyBindingFn, this.props.keyBindingFn);
	          var newKeyCommandListeners = memoizedConcat(this.props.keyCommandListeners, memoizedCoerceArray(keyCommandListener));

	          return _react2.default.createElement(ToWrap, _extends({}, this.props, {
	            ref: 'child',
	            styleMap: newStyleMap,
	            decorators: newDecorators,
	            buttons: newButtons,
	            overlays: newOverlays,
	            blockRendererFn: newBlockRendererFn,
	            blockStyleFn: newBlockStyleFn,
	            keyBindingFn: newKeyBindingFn,
	            keyCommandListeners: newKeyCommandListeners
	          }));
	        }
	      });
	    } else {
	      // wrapping a converter function
	      return function () {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        if (args.length === 1 && (typeof args[0] === 'string' || args[0].hasOwnProperty('_map') && args[0].getBlockMap != null)) {
	          // actively converting an HTML string/ContentState, so pass additional options to the next converter function.
	          return ToWrap({
	            htmlToStyle: htmlToStyle,
	            htmlToBlock: htmlToBlock,
	            htmlToEntity: htmlToEntity,
	            textToEntity: textToEntity,
	            styleToHTML: styleToHTML,
	            blockToHTML: blockToHTML,
	            entityToHTML: entityToHTML
	          }).apply(undefined, args);
	        } else {
	          // receiving a plugin to accumulate upon for a converter - accumulate
	          // options and return a new plugin wrapped around the passed one ready
	          // to take either another plugin or a string/ContentState

	          var oldOptions = args[0];

	          var newHTMLToStyle = memoizedCompose(memoizedMiddlewareAdapter(memoizedPassEmptyStyles(htmlToStyle)), memoizedMiddlewareAdapter(oldOptions.htmlToStyle));
	          newHTMLToStyle.__isMiddleware = true;

	          var newHTMLToBlock = memoizedCompose(memoizedMiddlewareAdapter(htmlToBlock), memoizedMiddlewareAdapter(oldOptions.htmlToBlock));
	          newHTMLToBlock.__isMiddleware = true;

	          var newHTMLToEntity = memoizedCompose(memoizedMiddlewareAdapter(htmlToEntity), memoizedMiddlewareAdapter(oldOptions.htmlToEntity));
	          newHTMLToEntity.__isMiddleware = true;

	          var newTextToEntity = memoizedCompose(memoizedMiddlewareAdapter(textToEntity), memoizedMiddlewareAdapter(oldOptions.textToEntity));
	          newTextToEntity.__isMiddleware = true;

	          var newStyleToHTML = memoizedCompose(memoizedMiddlewareAdapter(styleToHTML), memoizedMiddlewareAdapter(oldOptions.styleToHTML));
	          newStyleToHTML.__isMiddleware = true;

	          var newBlockToHTML = memoizedCompose(memoizedMiddlewareAdapter(blockToHTML), memoizedMiddlewareAdapter(oldOptions.blockToHTML));
	          newBlockToHTML.__isMiddleware = true;

	          var newEntityToHTML = memoizedCompose(memoizedMiddlewareAdapter(entityToHTML), memoizedMiddlewareAdapter(oldOptions.entityToHTML));
	          newEntityToHTML.__isMiddleware = true;

	          return createPlugin({
	            htmlToStyle: newHTMLToStyle,
	            htmlToBlock: newHTMLToBlock,
	            htmlToEntity: newHTMLToEntity,
	            textToEntity: newTextToEntity,
	            styleToHTML: newStyleToHTML,
	            blockToHTML: newBlockToHTML,
	            entityToHTML: newEntityToHTML
	          })(ToWrap);
	        }
	      };
	    }
	  };
	};

	exports.default = createPlugin;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _draftJs = __webpack_require__(4);

	var _immutable = __webpack_require__(1);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var camelCaseToHyphen = function camelCaseToHyphen(camelCase) {
	  return camelCase.replace(/[a-z][A-Z]/g, function (str) {
	    return str[0] + '-' + str[1].toLowerCase();
	  });
	};

	var getActiveEntity = function getActiveEntity(editorState) {
	  var currentBlock = editorState.getCurrentContent().getBlockForKey(editorState.getSelection().getStartKey());
	  if (currentBlock) {
	    return currentBlock.getEntityAt(editorState.getSelection().getStartOffset());
	  }
	};

	exports.default = {
	  camelCaseToHyphen: camelCaseToHyphen,

	  styleObjectToString: function styleObjectToString(styles) {
	    return Object.keys(styles).map(function (styleName) {
	      return camelCaseToHyphen(styleName) + ': ' + styles[styleName] + ';';
	    }).join(' ').replace(/"/g, '\\"');
	  },


	  entityStrategy: function entityStrategy(entityType) {
	    return function (contentBlock, callback) {
	      contentBlock.findEntityRanges(function (character) {
	        var entityKey = character.getEntity();
	        return entityKey !== null && _draftJs.Entity.get(entityKey).getType() === entityType;
	      }, callback);
	    };
	  },

	  getEntitySelection: function getEntitySelection(editorState, entityKey) {
	    var selections = [];
	    editorState.getCurrentContent().getBlocksAsArray().forEach(function (block) {
	      block.findEntityRanges(function (c) {
	        return c.getEntity() === entityKey;
	      }, function (start, end) {
	        selections.push(_draftJs.SelectionState.createEmpty(block.getKey()).merge({
	          anchorOffset: start,
	          focusOffset: end,
	          isBackward: false,
	          hasFocus: true
	        }));
	      });
	    });
	    (0, _invariant2.default)(selections.length === 1, 'getEntitySelection: More than one range with the same entityKey. Please use unique entity instances');
	    return selections[0];
	  },
	  insertBlockAtCursor: function insertBlockAtCursor(editorState, block) {
	    var contentState = editorState.getCurrentContent();
	    var selectionState = editorState.getSelection();

	    var afterRemoval = _draftJs.Modifier.removeRange(contentState, selectionState, 'backward');

	    var targetSelection = afterRemoval.getSelectionAfter();
	    var afterSplit = _draftJs.Modifier.splitBlock(afterRemoval, targetSelection);
	    var insertionTarget = afterSplit.getSelectionAfter();

	    var asType = _draftJs.Modifier.setBlockType(afterSplit, insertionTarget, block.getType());

	    var fragmentArray = [block, new _draftJs.ContentBlock({
	      key: (0, _draftJs.genKey)(),
	      type: 'unstyled',
	      text: '',
	      characterList: (0, _immutable.List)()
	    })];

	    var fragment = _draftJs.BlockMapBuilder.createFromArray(fragmentArray);

	    var withBlock = _draftJs.Modifier.replaceWithFragment(asType, insertionTarget, fragment);

	    var newContent = withBlock.merge({
	      selectionBefore: selectionState,
	      selectionAfter: withBlock.getSelectionAfter().set('hasFocus', true)
	    });

	    return _draftJs.EditorState.push(editorState, newContent, 'insert-fragment');
	  },
	  getSelectedInlineStyles: function getSelectedInlineStyles(editorState) {
	    var selection = editorState.getSelection();
	    var contentState = editorState.getCurrentContent();

	    var blocks = contentState.getBlockMap().skipUntil(function (value, key) {
	      return key === selection.getStartKey();
	    }).takeUntil(function (value, key) {
	      return contentState.getKeyBefore(key) === selection.getEndKey();
	    });

	    return blocks.reduce(function (styles, block) {
	      var blockKey = block.getKey();
	      var start = 0;
	      var end = block.getLength() - 1;
	      if (blockKey === selection.getStartKey()) {
	        start = selection.getStartOffset();
	      }
	      if (blockKey === selection.getEndKey()) {
	        end = selection.getEndOffset();
	      }

	      for (var i = start; i <= end; i++) {
	        styles = styles.union(block.getInlineStyleAt(i));
	      }

	      return styles;
	    }, (0, _immutable.Set)());
	  },
	  matchAll: function matchAll(string, regex) {
	    var result = [];
	    var matchArray = regex.exec(string);
	    while (matchArray !== null) {
	      result.push(matchArray.concat([matchArray.index]));
	      matchArray = regex.exec(string);
	    }
	    return result;
	  },


	  getActiveEntity: getActiveEntity,

	  isEntityActive: function isEntityActive(editorState, entityType) {
	    var activeEntityKey = getActiveEntity(editorState);
	    if (activeEntityKey) {
	      var entity = _draftJs.Entity.get(activeEntityKey);
	      return entity && entity.type === entityType;
	    }
	    return false;
	  }
	};

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	// utility function to accumulate the common plugin option function pattern of
	// handling args by returning a non-null result or delegate to other plugins
	exports.default = function (newFn, acc) {
	  return function () {
	    var result = newFn.apply(undefined, arguments);
	    if (result === null || result === undefined) {
	      return acc.apply(undefined, arguments);
	    }
	    return result;
	  };
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = memoize;

	var _immutable = __webpack_require__(1);

	// memoization higher-order function using Immutable.js.
	// used to memoize accumulated options when rendering plugin wrapper components.

	function memoize(func) {
	  var _cache = (0, _immutable.Map)();

	  return function () {
	    var argList = _immutable.List.of.apply(_immutable.List, arguments);
	    if (!_cache.has(argList)) {
	      _cache = _cache.set(argList, func.apply(undefined, arguments));
	    }
	    return _cache.get(argList);
	  };
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _immutable = __webpack_require__(1);

	// function to handle previous techniques to convert to HTML, including
	// plain objects with `{start, end}` values and non-HOF functions that return
	// either a String or ReactElement

	var middlewareAdapter = function middlewareAdapter(middleware) {
	  if (middleware && middleware.__isMiddleware) {
	    return middleware;
	  }
	  return function (next) {
	    return function () {
	      if ((typeof middleware === 'undefined' ? 'undefined' : _typeof(middleware)) === 'object') {
	        // handle old blockToHTML objects
	        var block = arguments.length <= 0 ? undefined : arguments[0];

	        var objectResult = void 0;

	        if (typeof block === 'string') {
	          // handle case of inline style value
	          var style = block;
	          if (true) {
	            console.warn('styleToHTML: Use of plain objects to define HTML output is being deprecated. Please switch to using functions that return a {start, end} object or ReactElement.');
	          }

	          objectResult = middleware[style];
	        } else {
	          if (true) {
	            console.warn('blockToHTML: Use of plain objects to define HTML output is being deprecated. Please switch to using functions that return a {start, end} object or ReactElement.');
	          }

	          objectResult = middleware[block.type];
	        }

	        // check for inline style value instead of a raw block
	        if (objectResult !== null && objectResult !== undefined) {
	          return objectResult;
	        }
	        return next.apply(undefined, arguments);
	      }

	      var returnValue = void 0;
	      try {
	        // try immediately giving the function the content data in case it's a simple
	        // function that doesn't expect a `next` function
	        var nonMiddlewareResult = middleware.apply(undefined, arguments);
	        if (nonMiddlewareResult === null || nonMiddlewareResult === undefined) {
	          // the behavior for non-middleware functions is to delegate by returning
	          // `null` or `undefined`, so do delegation for them
	          returnValue = next.apply(undefined, arguments);
	        } else if (arguments.length === 2 && typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'string' && (arguments.length <= 1 ? undefined : arguments[1]) === nonMiddlewareResult) {
	          // entityToHTML option returned `originalText`, i.e. no change was made
	          returnValue = next.apply(undefined, arguments);
	        } else if (Array.isArray(nonMiddlewareResult)) {
	          // returned an array from a textToEntity function, concat with next
	          returnValue = nonMiddlewareResult.concat(next.apply(undefined, arguments));
	        } else if (_immutable.OrderedSet.isOrderedSet(nonMiddlewareResult)) {
	          var _ref;

	          // returned an OrderedSet from htmlToStyle, pass to next as third argument
	          var previousStyles = (_ref = arguments.length - 1, arguments.length <= _ref ? undefined : arguments[_ref]);
	          returnValue = previousStyles.union(nonMiddlewareResult).union(next.apply(undefined, arguments));
	        } else if (typeof nonMiddlewareResult === 'function') {
	          // most middleware HOFs will return another function when invoked, so we
	          // can assume that it is one here
	          returnValue = middleware(next).apply(undefined, arguments);
	        } else {
	          // the function was a simple non-middleware function and
	          // returned a reasonable value, so return its result
	          returnValue = nonMiddlewareResult;
	        }
	      } catch (e) {
	        // it's possible that trying to use a middleware function like a simple non-
	        // middleware function will throw, so try it as a middleware HOF
	        returnValue = middleware(next).apply(undefined, arguments);
	      } finally {
	        return returnValue;
	      }
	    };
	  };
	};

	exports.default = middlewareAdapter;

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_15__;

/***/ }
/******/ ])
});
;