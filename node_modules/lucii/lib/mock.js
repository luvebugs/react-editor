'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _fs = require('fs');

var _path = require('path');

var _jsonServer = require('json-server');

var _jsonServer2 = _interopRequireDefault(_jsonServer);

var _serverDestroy = require('server-destroy');

var _serverDestroy2 = _interopRequireDefault(_serverDestroy);

var _path2 = require('./util/path');

var _path3 = _interopRequireDefault(_path2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function start(option) {
    var server = option.server,
        router = option.router,
        middlewares = option.middlewares,
        port = option.port,
        host = option.host,
        rewriter = option.rewriter;

    server.use(middlewares);
    server.use(rewriter);
    server.use(_jsonServer2.default.bodyParser);
    server.use(function (req, res, next) {
        if (req.method === 'POST') {
            // Converts POST to GET and move payload to query params
            // This way it will make JSON Server that it's GET request
            req.method = 'GET';
            req.query = req.body;
        }
        // Continue to JSON Server router
        next();
    });
    server.use(router);
    return server.listen(port, host, function () {
        console.log('JSON Server is running');
    });
}

function getDB(db) {
    var result = {};
    if ((0, _fs.lstatSync)(db).isDirectory()) {
        var files = (0, _fs.readdirSync)(db);
        files.forEach(function (file) {
            var filename = db + '/' + file;
            result = (0, _extends3.default)({}, result, getDB(filename));;
        });
    } else {
        result = (0, _extends3.default)({}, JSON.parse((0, _fs.readFileSync)(db)), result);
    }
    return result;
}

exports.default = function (option) {
    var config = option.config,
        pkg = option.pkg;
    var _config$mock = config.mock,
        db = _config$mock.db,
        port = _config$mock.port,
        host = _config$mock.host,
        rewrite = _config$mock.rewrite;

    if (typeof rewrite === 'string') {
        rewrite = require((0, _path3.default)(process.cwd())(rewrite));
    }
    console.log(rewrite);
    function run() {
        var server = _jsonServer2.default.create();
        var router = _jsonServer2.default.router(getDB(db));
        var middlewares = _jsonServer2.default.defaults();
        var rewriter = _jsonServer2.default.rewriter(rewrite);
        var app = start({ server: server, router: router, middlewares: middlewares, port: port, host: host, rewriter: rewriter });
        var watcher = (0, _fs.watch)(db, 'utf-8', function () {
            app && (0, _serverDestroy2.default)(app);
            app.destroy();
            watcher.close();
            run();
        });
    }
    return function (avgs) {
        run();
    };
};

module.exports = exports['default'];