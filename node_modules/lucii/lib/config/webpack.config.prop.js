'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.default = function (config, pkg) {
    var NODE_ENV = process.env.NODE_ENV;
    var dependencies = (0, _keys2.default)(pkg.dependencies);
    var vendors = config.commons || dependencies;
    var getThemeConfig = require((0, _path3.default)(process.cwd())(config.theme));
    var theme = getThemeConfig(config.publicPath);
    var _config$html = config.html,
        title = _config$html.title,
        favicon = _config$html.favicon,
        template = _config$html.template,
        filename = _config$html.filename;

    var plugins = [new _webpack2.default.optimize.UglifyJsPlugin()];
    return {
        entry: (0, _extends3.default)({}, config.entry, {
            vendor: vendors
        }),
        output: {
            filename: '[name].[hash:5].js',
            publicPath: config.publicPath,
            path: (0, _path.resolve)(config.outputPath),
            chunkFilename: 'js/[name].[chunkhash:5].js'
        },
        resolveLoader: {
            moduleExtensions: ['-loader']
        },
        resolve: {
            extensions: ['.js', '.vue', '.json'],
            alias: {
                'react/lib/ReactMount': 'react-dom/lib/ReactMount',
                'vue$': 'vue/dist/vue.esm.js',
                '@': (0, _path.resolve)('src')
            }
        },
        module: {
            rules: [{
                test: /\.vue$/,
                loader: ['vue-loader']
            }, {
                test: /\.jsx$/,
                loaders: ['babel']
            }, {
                test: /\.js?$/,
                exclude: [/node_modules/],
                loaders: ['babel']
                // loaders: ['react-hot', 'babel']
            }, {
                test: /\.json$/,
                loader: 'json'
            }, {
                test: /\.css$/,
                loader: _extractTextWebpackPlugin2.default.extract({
                    fallback: 'style',
                    use: 'css?{"modifyVars":' + (0, _stringify2.default)(theme) + '}'
                })
            }, {
                test: /\.less$/,
                include: [/node_modules/, /index\.less$/],
                loader: _extractTextWebpackPlugin2.default.extract({
                    fallback: 'style',
                    use: 'css?importLoaders=1!postcss!less?{"modifyVars":' + (0, _stringify2.default)(theme) + '}'
                })
            }, {
                test: /\.less$/,
                exclude: [/node_modules/, /index\.less$/],
                loader: _extractTextWebpackPlugin2.default.extract({
                    fallback: 'style',
                    use: 'css?importLoaders=1&modules&localIdentName=[name]__[local]!postcss!less'
                })
            }, {
                test: /\.(png|gif|jpg|svg|ico)$/,
                loader: 'url',
                options: {
                    limit: 10000,
                    name: 'static/[name].[hash:5].[ext]'
                }
            }, {
                test: /\.(woff|eot|ttf)\??.*$/,
                loader: 'url',
                options: {
                    limit: 10000,
                    name: 'static/[name].[ext]'
                }
            }]
        },
        plugins: [new _webpack2.default.LoaderOptionsPlugin({
            options: {
                babel: {
                    babelrc: false,
                    presets: [require.resolve('babel-preset-es2015'), require.resolve('babel-preset-react'), require.resolve('babel-preset-stage-0')],
                    plugins: [
                        // require.resolve('babel-plugin-add-module-exports'),
                        // require.resolve('babel-plugin-react-require'),
                    ].concat(config.production.extraBabelPlugins || []),
                    cacheDirectory: true
                },
                postcss: function postcss() {
                    return {
                        defaults: [_autoprefixer2.default],
                        cleaner: [(0, _autoprefixer2.default)({ browsers: ['last 4 versions'] })]
                    };
                }
            }
        }), new _webpack2.default.DefinePlugin({
            'process.env': {
                NODE_ENV: (0, _stringify2.default)(NODE_ENV)
            }
        }), new _htmlWebpackPlugin2.default({
            title: title,
            favicon: favicon,
            filename: filename,
            template: template,
            inject: true
        }), new _webpack2.default.optimize.CommonsChunkPlugin({
            name: "vendor",
            filename: "[name].[hash:5].js"
        }), new _extractTextWebpackPlugin2.default('[name].[chunkhash:5].css')].concat(plugins)
    };
};

var _path = require('path');

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _htmlWebpackPlugin = require('html-webpack-plugin');

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

var _extractTextWebpackPlugin = require('extract-text-webpack-plugin');

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _path2 = require('../util/path');

var _path3 = _interopRequireDefault(_path2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

;
module.exports = exports['default'];