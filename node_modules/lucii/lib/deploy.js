'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _nodeClientUpload = require('node-client-upload');

var _nodeClientUpload2 = _interopRequireDefault(_nodeClientUpload);

var _fs = require('fs');

var _path = require('path');

var _color = require('./util/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deploy(file, path, server, to) {
    var toPath = to + path;
    (0, _nodeClientUpload2.default)(server, file, {
        to: toPath
    }, function (res, body) {
        console.log((0, _color.info)(file), (0, _color.warning)('>>>>>>>>>>'), (0, _color.success)(toPath));
    });
}

function getFiles(path, server, to, base, rewrite) {
    if ((0, _fs.lstatSync)(path).isDirectory()) {
        var files = (0, _fs.readdirSync)(path);
        files.forEach(function (file) {
            var filename = path + '/' + file;
            getFiles(filename, server, to, base, rewrite);
        });
    } else {
        var _parse = (0, _path.parse)(path),
            name = _parse.name,
            ext = _parse.ext;

        var pathname = path.replace(base, '') || name + ext;
        if (rewrite) {
            pathname = pathname.replace(ext, rewrite);
        }
        deploy(path, pathname, server, to);
    }
}

exports.default = function (option) {
    var config = option.config,
        pkg = option.pkg;

    var deploys = config.deploy;

    return function () {
        if (Array.isArray(deploys)) {
            deploys.forEach(function (deploy) {
                var dir = deploy.dir,
                    server = deploy.server,
                    to = deploy.to,
                    rewrite = deploy.rewrite;

                getFiles(dir, server, to, dir, rewrite);
            });
        } else {
            var dir = deploys.dir,
                server = deploys.server,
                to = deploys.to;

            getFiles(dir, server, to, dir);
        }
    };
};

module.exports = exports['default'];