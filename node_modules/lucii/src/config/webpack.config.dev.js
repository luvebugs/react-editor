import {resolve} from 'path';
import webpack from 'webpack';
import autoprefixer from 'autoprefixer';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import ExtractTextPlugin from 'extract-text-webpack-plugin';
import AddAssetPlugin from '../util/addAssetPlugin'
import getPath from '../util/path';

export default function (config) {
    const getThemeConfig = require(getPath(process.cwd())(config.theme));
    const theme = getThemeConfig('');
    const {title, favicon, template, filename} = config.html;
    const dllPlugins = [new webpack.DllReferencePlugin({
            context: config.root,
            manifest: require(`${config.root}/manifest.json`)
        })];
    return {
        entry: config.entry,
        output: {
            filename: "[name].js",
            publicPath: '/',
            path: resolve(config.outputPath),
            chunkFilename: 'js/[name].[chunkhash:5].js'
        },
        resolveLoader: {
            moduleExtensions: ['-loader']
        },
        resolve: {
            extensions: ['.js', '.vue', '.json'],
            alias: {
                'react/lib/ReactMount': 'react-dom/lib/ReactMount',
                'vue$': 'vue/dist/vue.esm.js',
                '@': resolve('src')
            }
        },
        module: {
            rules: [{
                    test: /\.vue$/,
                    loader: ['vue-loader']
                }, {
                    test: /\.jsx$/,
                    loaders: ['react-hot', 'babel']
                }, {
                    test: /\.js?$/,
                    exclude: [/node_modules/],
                    loaders: ['babel'].concat(config.development.loaders || []).reverse()
                }, {
                    test: /\.json$/,
                    loader: 'json'
                }, {
                    test: /\.css$/,
                    loader: `style!css?{"modifyVars":${JSON.stringify(theme)}}!postcss`
                }, {
                    test: /\.less$/,
                    include: [
                        /node_modules/, /index\.less$/
                    ],
                    loader: `style!css?importLoaders=1!postcss!less?{"modifyVars":${JSON.stringify(theme)}}`
                }, {
                    test: /\.less$/,
                    exclude: [
                        /node_modules/, /index\.less$/
                    ],
                    loader: 'style!css?importLoaders=1&modules&localIdentName=[name]__[local]!postcss!less'
                }, {
                    test: /\.(png|gif|jpg|svg|ico)$/,
                    loader: 'url',
                    options: {
                        limit: 10000,
                        name: 'static/[name].[hash:5].[ext]'
                    }
                }, {
                    test: /\.(woff|eot|ttf)\??.*$/,
                    loader: 'url',
                    options: {
                        limit: 10000,
                        name: 'static/[name].[ext]'
                    }
                }
            ]
        },
        plugins: [
            new webpack.LoaderOptionsPlugin({
                options: {
                    babel: {
                        babelrc: false,
                        presets: [
                            require.resolve('babel-preset-es2015'),
                            require.resolve('babel-preset-react'),
                            require.resolve('babel-preset-stage-0'),
                        ],
                        plugins: [
                            // require.resolve('babel-plugin-add-module-exports'),
                            // require.resolve('babel-plugin-react-require'),
                        ].concat(config.development.extraBabelPlugins || []),
                        cacheDirectory: true
                    },
                    postcss() {
                        return {
                            defaults: [autoprefixer],
                            cleaner: [autoprefixer({browsers: ['last 4 versions']})]
                        };
                    }
                }
            }),
            new HtmlWebpackPlugin({
                title: title,
                favicon: favicon,
                filename: filename,
                template: template,
                inject: true
            }),
            new ExtractTextPlugin('[name].css'),
            new webpack.HotModuleReplacementPlugin(),
            new AddAssetPlugin({config})
        ].concat(dllPlugins)
    }
};