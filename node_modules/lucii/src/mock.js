import {watch, readdirSync, lstatSync, readFileSync} from 'fs';
import {resolve} from 'path';
import jsonServer from 'json-server';
import enableDestroy from 'server-destroy';
import getPath from './util/path';

function start(option) {
    const {server, router, middlewares, port, host, rewriter} = option;
    server.use(middlewares);
    server.use(rewriter);
    server.use(jsonServer.bodyParser);
    server.use((req, res, next) => {
        if (req.method === 'POST') {
            // Converts POST to GET and move payload to query params
            // This way it will make JSON Server that it's GET request
            req.method = 'GET';
            req.query = req.body;
        }
        // Continue to JSON Server router
        next();
    });
    server.use(router);
    return server.listen(port, host, () => {
        console.log('JSON Server is running')
    });
}

function getDB(db) {
    let result = {};
    if (lstatSync(db).isDirectory()) {
        const files = readdirSync(db);
        files.forEach(function (file) {
            const filename = db + '/' + file;
            result = {...result, ...getDB(filename)};;
        });
    } else {
        result = {...JSON.parse(readFileSync(db)), ...result};
    }
    return result;
}

export default (option) => {
    const {config, pkg} = option;
    let {db, port, host, rewrite} = config.mock;
    if (typeof(rewrite) === 'string') {
        rewrite = require(getPath(process.cwd())(rewrite));
    }
    console.log(rewrite);
    function run() {
        const server = jsonServer.create();
        const router = jsonServer.router(getDB(db));
        const middlewares = jsonServer.defaults();
        const rewriter = jsonServer.rewriter(rewrite);
        const app = start({server, router, middlewares, port, host, rewriter});
        const watcher = watch(db, 'utf-8', function () {
            app && enableDestroy(app);
            app.destroy();
            watcher.close();
            run();
        });
    }
    return (avgs) => {
        run();
    }
}